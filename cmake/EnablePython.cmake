include_guard(GLOBAL)

function(target_enable_python target_name)
    if(ENABLE_PYTHON_PLUGINS)
        find_package(Python COMPONENTS Interpreter Development)
        if(Python_FOUND)
            target_include_directories(${target_name} PUBLIC ${Python_INCLUDE_DIRS})
            if(WIN32)
                # On Windows, we need to link to python library
                # But we should avoid linking conflicts, so we use the imported targets
                if(TARGET Python::Python)
                    target_link_libraries(${target_name} PUBLIC Python::Python)
                else()
                    target_link_libraries(${target_name} PUBLIC ${Python_LIBRARIES})
                endif()
            endif()
        else()
            message(WARNING "Python not found. Disabling Python plugin support.")
            set(ENABLE_PYTHON_PLUGINS OFF)
        endif()
    endif()
endfunction()

function(enable_python)
    if(ENABLE_PYTHON_PLUGINS)
        find_package(Python COMPONENTS Interpreter Development)
        if(Python_FOUND)
            message(STATUS "Python found: ${Python_VERSION}")
            message(STATUS "Python executable: ${Python_EXECUTABLE}")
            message(STATUS "Python include dirs: ${Python_INCLUDE_DIRS}")
            message(STATUS "Python libraries: ${Python_LIBRARIES}")
            
            if(WIN32)
                # On Windows, link to python library for the main executable
                # But we should avoid linking conflicts, so we use the imported targets
                if(TARGET Python::Python)
                    target_link_libraries(mcp-server++ PRIVATE Python::Python)
                else()
                    target_link_libraries(mcp-server++ PRIVATE ${Python_LIBRARIES})
                endif()
            endif()
        else()
            message(WARNING "Python not found. Disabling Python plugin support.")
            set(ENABLE_PYTHON_PLUGINS OFF)
        endif()
    endif()
endfunction()