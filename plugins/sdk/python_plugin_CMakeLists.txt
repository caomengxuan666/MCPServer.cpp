# CMakeLists.txt template for building Python plugins as DLLs for MCPServer++
# Copy this file to your plugin directory and modify as needed

cmake_minimum_required(VERSION 3.23)
project(PYTHON_PLUGIN_NAME)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set the path to MCPServer++ root directory
set(MCP_SERVER_ROOT "path/to/mcpserver++" CACHE STRING "Path to MCPServer++ root directory")

# Find required packages
find_package(Python COMPONENTS Interpreter Development REQUIRED)
# Add the plugin library
add_library(${PROJECT_NAME} SHARED
    # Add your plugin source files here
    # ${MCP_SERVER_ROOT}/plugins/sdk/pybind_module.cpp
)

# Include directories
target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${pybind11_INCLUDE_DIRS}
    # MCPServer++ include directories
    ${MCP_SERVER_ROOT}/plugins/sdk
    ${MCP_SERVER_ROOT}/include
    ${MCP_SERVER_ROOT}/third_party/nlohmann
)

# Link libraries
target_link_libraries(${PROJECT_NAME} PRIVATE 
    pybind11::embed
)

# Platform-specific settings
if(WIN32)
    # Windows-specific settings
    target_compile_definitions(${PROJECT_NAME} PRIVATE MCP_API=__declspec(dllexport))
else()
    # Unix-specific settings
    target_compile_definitions(${PROJECT_NAME} PRIVATE MCP_API=)
endif()

# Example usage:
# mkdir build
# cd build
# cmake .. -DMCP_SERVER_ROOT=/path/to/mcpserver++
# cmake --build . --config Release